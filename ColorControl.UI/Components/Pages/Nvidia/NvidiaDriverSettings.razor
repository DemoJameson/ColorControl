@using ColorControl.Shared.Contracts
@using ColorControl.Shared.Contracts.NVIDIA
@using ColorControl.UI.Services;
@using NvAPIWrapper.Native.Display
@using ColorControl.Shared.Common;

@rendermode Constants.RenderMode

@inject RpcUiClientService _rpcClientService
@inject JSHelper jsHelper;

<div class="modal modal-lg" id="driverSettingsModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" @onfocus="OnFocus">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(Preset != null ? Preset.IsDisplayPreset ? $"Driver settings for display {Preset.displayName}" : $"Driver settings for {Preset.IdOrName}" : "Driver settings")</h5>
                @if (Preset == null)
                {
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => IsVisible = false"></button>
                }
                else
                {
                    <button type="button" class="btn-close" data-bs-toggle="modal" data-bs-target="#presetModal" aria-label="Close" @onclick="() => IsVisible = false"></button>
                }
            </div>
            <div class="modal-body">
                <form class="row g-1">

                    @if (ProfileNames != null)
                    {
                        <div class="mb-2">
                            <label class="form-label" for="profileName">Profile</label>
                            <select class="form-select" id="profileName" @bind="CurrentProfileName" @bind:after="ProfileOnChange">
                                @foreach (var profileName in ProfileNames)
                                {
                                    <option value="@profileName">@profileName</option>
                                }
                            </select>
                        </div>
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" @bind="OnlyFoundPrograms" id="onlyFoundPrograms" @bind:after="OnlyFoundProgramsOnChange">
                            <label class="form-check-label" for="onlyFoundPrograms">
                                Only show found programs
                            </label>
                        </div>
                    }

                    <div class="accordion accordion-flush" id="driverSettingsAccordion">
                        @if (Groups != null) 
                        {
                            foreach (var group in Groups)
                            {
                                var groupId = $"{group.Name.Replace(' ', '_')}Settings";

                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed py-2 @(group.HasChangedSettings ? "text-warning fw-bold" : "")" type="button" data-bs-toggle="collapse" data-bs-target="#@groupId">
                                            @group.Name
                                        </button>
                                    </h2>
                                    <div id="@groupId" class="accordion-collapse collapse" data-bs-parent="#driverSettingsAccordion">
                                        <div class="accordion-body">
                                            @foreach (var setting in group.DriverSettings)
                                            {
                                                if (NvSettingConstants.RangeDriverSettings.Contains(setting.SettingId) && setting.Values != null)
                                                {
                                                    <div class="mb-2">
                                                        <label class="form-label @(setting.Value != setting.DefaultValue && setting.Value != NvSettingConstants.UnsetDwordValue ? "text-warning fw-bold" : "")" for="@setting.SettingId">@setting.SettingText (@setting.Value)</label>
                                                        <input class="form-range" type="range" min="@setting.Values.Min(v => v.Value)" max="@setting.Values.Max(v => v.Value)" @bind="setting.Value" id="@setting.SettingId">
                                                    </div>
                                                }
                                                else if (setting.Values != null)
                                                {
                                                    <div class="mb-2">
                                                        <label class="form-label @(setting.Value != setting.DefaultValue && setting.Value != NvSettingConstants.UnsetDwordValue ? "text-warning fw-bold" : "")" for="@setting.SettingId">@setting.SettingText</label>
                                                        <select class="form-select" id="@setting.SettingId" @bind="setting.Value">
                                                            @if (Preset != null)
                                                            {
                                                                <option value="@(NvSettingConstants.UnsetDwordValue)">Unchanged</option>
                                                            }
                                                            @foreach (var settingValue in setting.Values)
                                                            {
                                                                <option value="@settingValue.Value" class="@(setting.DefaultValue == settingValue.Value ? "text-success" : "")">@settingValue.ValueName</option>
                                                            }
                                                        </select>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                @if (Preset == null)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => IsVisible = false">Close</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="ApplyClick">Apply</button>
                }
                else
                {
                    <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#presetModal" @onclick="() => IsVisible = false">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="ApplyClick">Save</button>
                }
            </div>
        </div>
    </div>
</div>

@code {

    public class GroupedSettings
    {
        public string Name { get; private set; }
        public List<NvSettingItemDto> DriverSettings { get; private set; }
        public bool HasChangedSettings { get; private set; }

        public GroupedSettings(string name, List<NvSettingItemDto> settings, bool hasChangedSettings)
        {
            Name = name;
            DriverSettings = settings;
            HasChangedSettings = hasChangedSettings;
        }
    }


    private NvPreset? _preset;

    [Parameter]
    public NvPreset? Preset { get; set; }

    [Parameter]
    public Func<NvPreset, Task>? AfterApply { get; set; }

    private List<GroupedSettings>? Groups { get; set; }
    private List<NvSettingItemDto>? DriverSettings { get; set; }
    private List<string>? ProfileNames { get; set; }
    private string? CurrentProfileName { get; set; }

    private bool IsVisible { get; set; }

    private bool OnlyFoundPrograms = true;

    protected override async Task OnParametersSetAsync()
    {
        if (_preset != Preset)
        {
            _preset = Preset;
            CurrentProfileName = Preset?.DriverProfileName;
            DriverSettings = null;
            await LoadDriverSettings();
        }
    }

    protected async Task LoadDriverSettings()
    {
        DriverSettings = await _rpcClientService.CallAsync<List<NvSettingItemDto>>("NvService", "GetDriverSettings", CurrentProfileName);
        if (DriverSettings != null)
        {
            DriverSettings.ForEach(s => s.ValueChanged = false);
        }

        if (DriverSettings != null)
        {
            if (Preset != null)
            {
                foreach (var setting in DriverSettings)
                {
                    setting.Value = setting.DefaultValue;
                    setting.ValueChanged = false;
                }

                foreach (var presetSetting in Preset.driverSettings)
                {
                    var setting = DriverSettings.FirstOrDefault(s => s.SettingId == presetSetting.Key);

                    if (setting == null)
                    {
                        continue;
                    }

                    setting.Value = presetSetting.Value;
                    //setting.ValueChanged = false;
                }
            }

            Groups = DriverSettings.OrderBy(s => s.GroupName).GroupBy(s => s.GroupName).Select(g =>
            {
                var settings = g.ToList();
                var changedSettings = settings.Any(s => s.Value != s.DefaultValue && s.Value != NvSettingConstants.UnsetDwordValue);

                var group = new GroupedSettings(g.Key, g.ToList(), changedSettings);

                return group;
            }).ToList();
        }

        StateHasChanged();
    }

    private async Task ApplyClick(MouseEventArgs e)
    {
        if (DriverSettings == null)
        {
            return;
        }

        var changedSettings = DriverSettings.Where(s => s.ValueChanged);

        if (Preset != null)
        {
            Preset.UpdateDriverSettings(changedSettings);

            await jsHelper.CloseModal("driverSettingsModal");
            await jsHelper.OpenModal("presetModal");

            return;
        }

        var changedSettingsDictionary = changedSettings.ToDictionary(k => k.SettingId, v => v.Value);

        var result = await _rpcClientService.CallAsync<bool>("NvService", "SetDriverSettings", changedSettingsDictionary, CurrentProfileName);
    }

    private async Task ProfileOnChange()
    {
        if (CurrentProfileName?.Contains("Base") == true)
        {
            CurrentProfileName = null;
        }

        if (Preset != null)
        {
            Preset.DriverProfileName = CurrentProfileName;
        }

        DriverSettings = null;

        await LoadDriverSettings();
    }

    private async Task OnlyFoundProgramsOnChange()
    {
        ProfileNames = await _rpcClientService.CallAsync<List<string>>("NvService", "GetDriverProfileNames", OnlyFoundPrograms);
    }

    private async Task OnFocus(FocusEventArgs e)
    {
        if (!IsVisible)
        {
            IsVisible = true;
            ProfileNames ??= await _rpcClientService.CallAsync<List<string>>("NvService", "GetDriverProfileNames", OnlyFoundPrograms);
            await LoadDriverSettings();
        }
    }
}