@using ColorControl.Shared.Contracts
@using ColorControl.Shared.Contracts.LG
@using ColorControl.Shared.Contracts.NVIDIA
@using ColorControl.Shared.Contracts.Samsung
@using ColorControl.Shared.EventDispatcher
@using ColorControl.UI.Services;
@using ColorControl.Shared.Common;

@typeparam TPreset where TPreset : PresetBase
@inject RpcUiClientService _rpcClientService

@if (Label != null && Steps != null)
{
    var index = 0;

    <div class="mb-2">
        <div class="d-flex align-items-center">
            <label class="form-label" for="name">@Label</label>
            <div class="d-flex ms-auto">
                @if (NvPresets != null || SamsungPresets != null || LgPresets != null || CustomItems != null)
                {
                    <div class="dropdown dropstart mb-1">
                        <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">Add</button>
                        <form class="dropdown-menu p-3 dropdown-menu-end" style="width: 21rem; height: 430px">
                            <ul class="nav nav-tabs" id="presetTab" role="tablist">
                                @{
                                    var linkActive = "active";
                                }

                                @if (NvPresets != null && NvPresetsEnabled)
                                {
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link px-2 @(linkActive)" id="nvidia-tab" data-bs-toggle="tab" data-bs-target="#nvidia-tab-pane" type="button" role="tab" aria-controls="nvidia-tab-pane" aria-selected="true">NVIDIA</button>
                                    </li>
                                    linkActive = "";
                                }
                                @if (SamsungPresets != null && SamsungPresetsEnabled)
                                {
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link px-2 @(linkActive)" id="samsung-tab" data-bs-toggle="tab" data-bs-target="#samsung-tab-pane" type="button" role="tab" aria-controls="samsung-tab-pane" aria-selected="true">Samsung</button>
                                    </li>
                                    linkActive = "";
                                }
                                @if (LgPresets != null && LgPresetsEnabled)
                                {
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link px-2 @(linkActive)" id="lg-tab" data-bs-toggle="tab" data-bs-target="#lg-tab-pane" type="button" role="tab" aria-controls="lg-tab-pane" aria-selected="true">LG</button>
                                    </li>
                                    linkActive = "";
                                }
                                @if (CustomItems != null)
                                {
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link px-2 @(linkActive)" id="custom-tab" data-bs-toggle="tab" data-bs-target="#custom-tab-pane" type="button" role="tab" aria-controls="custom-tab-pane" aria-selected="true">Custom</button>
                                    </li>
                                    linkActive = "";
                                }
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link px-2 @(linkActive)" id="program-tab" data-bs-toggle="tab" data-bs-target="#program-tab-pane" type="button" role="tab" aria-controls="program-tab-pane" aria-selected="true">Program</button>
                                </li>
                                @if (ActionItems != null)
                                {
                                    linkActive = "";
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link px-2 @(linkActive)" id="action-tab" data-bs-toggle="tab" data-bs-target="#action-tab-pane" type="button" role="tab" aria-controls="action-tab-pane" aria-selected="true">Action</button>
                                    </li>
                                }
                            </ul>

                            <div class="tab-content" id="presetTabContent">
                                @{
                                    var tabActive = "show active";
                                }

                                @if (NvPresets != null && NvPresetsEnabled)
                                {
                                    <div class="tab-pane fade @(tabActive)" id="nvidia-tab-pane" role="tabpanel" aria-labelledby="nvidia-tab">
                                        <div class="mt-3 mb-3">
                                            <label class="form-label" for="nvPreset">NVIDIA preset</label>
                                            <select class="form-select" multiple id="nvPreset" @onchange="NvPresetChange" style="height: 250px">
                                                @foreach (var preset in NvPresets)
                                                {
                                                    <option value="@preset.id">@preset.IdOrName</option>
                                                }
                                            </select>
                                        </div>
                                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => AddNvPresetOnClick()" disabled="@(NvPresetsToAdd.Count == 0)">Add item(s)</button>
                                    </div>
                                    tabActive = "";
                                }
                                @if (SamsungPresets != null && SamsungPresetsEnabled)
                                {
                                    <div class="tab-pane fade @(tabActive)" id="samsung-tab-pane" role="tabpanel" aria-labelledby="samsung-tab">
                                        <div class="mt-3 mb-3">
                                            <label class="form-label" for="samsungPreset">Samsung preset</label>
                                            <select class="form-select" id="samsungPreset" @bind="SamsungPresetToAddId">
                                                <option value="">Select preset</option>
                                                @foreach (var preset in SamsungPresets)
                                                {
                                                    <option value="@preset.id">@preset.IdOrName</option>
                                                }
                                            </select>
                                        </div>
                                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => AddSamsungPresetOnClick()">Add item</button>
                                    </div>
                                    tabActive = "";
                                }
                                @if (LgPresets != null && LgPresetsEnabled)
                                {
                                    <div class="tab-pane fade @(tabActive)" id="lg-tab-pane" role="tabpanel" aria-labelledby="lg-tab">
                                        <div class="mt-3 mb-3">
                                            <label class="form-label" for="lgPreset">LG preset</label>
                                            <select class="form-select" id="lgPreset" @bind="LgPresetToAddId">
                                                <option value="">Select preset</option>
                                                @foreach (var preset in LgPresets)
                                                {
                                                    <option value="@preset.id">@preset.IdOrName</option>
                                                }
                                            </select>
                                        </div>
                                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => AddLgPresetOnClick()">Add item</button>
                                    </div>
                                    tabActive = "";
                                }
                                @if (CustomItems != null)
                                {
                                    <div class="tab-pane fade @(tabActive)" id="custom-tab-pane" role="tabpanel" aria-labelledby="custom-tab">
                                        @foreach (var customItem in CustomItems)
                                        {
                                            <div class="mt-3 mb-3">
                                                <label class="form-label" for="customItem">@customItem.Name</label>
                                                <select class="form-select" id="customItem" @bind="customItem.SelectedItem">
                                                    <option value="">Select item</option>
                                                    @foreach (var item in customItem.Items)
                                                    {
                                                        <option value="@item">@item</option>
                                                    }
                                                </select>
                                            </div>
                                        }
                                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => AddCustomItemsOnClick()">Add item</button>
                                    </div>
                                    tabActive = "";
                                }

                                <div class="tab-pane fade @(tabActive)" id="program-tab-pane" role="tabpanel" aria-labelledby="program-tab">
                                    <div class="mt-3 mb-3">
                                        <StartProgramInput @bind-Path="StartProgramPath" @bind-Parameters="StartProgramParameters"></StartProgramInput>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => AddStartProgramOnClick()">Add item</button>
                                </div>

                                @{
                                    tabActive = "";
                                }

                                @if (ActionItems != null)
                                {
                                    <div class="tab-pane fade @(tabActive)" id="action-tab-pane" role="tabpanel" aria-labelledby="action-tab">
                                        <div class="mt-3 mb-3">
                                            @foreach (var customItem in ActionItems)
                                            {
                                                <div class="mb-2">
                                                    <label class="form-label" for="advancedCustomItem">@customItem.Name</label>
                                                    <select class="form-select" id="advancedCustomItem" @bind="customItem.SelectedActionName" @bind:after="() => AdvancedItemChanged(customItem)">
                                                        <option value="">Select action</option>
                                                        @foreach (var keyValue in customItem.GroupedActions)
                                                        {
                                                            <optgroup label="@keyValue.Key">
                                                                @foreach (var item in keyValue.Value)
                                                                {
                                                                    <option value="@item.Name">@item.Title</option>
                                                                }
                                                            </optgroup>
                                                        }
                                                    </select>
                                                </div>
                                                <FieldDefs Fields="ActionFields"></FieldDefs>
                                            }
                                        </div>
                                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => AddActionItemsOnClick()">Add item</button>
                                    </div>
                                }

                            </div>
                        </form>
                    </div>
                }
            </div>
        </div>
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-click" type="button" role="tab" aria-controls="nav-click" aria-selected="true">Visual steps</button>
                <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-raw" type="button" role="tab" aria-controls="nav-raw" aria-selected="false">Raw text</button>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-click" role="tabpanel" aria-labelledby="nav-click-tab" tabindex="0">
                <div class="btn-group btn-group-sm d-inline-flex flex-wrap" role="group" aria-label="Small button group">

                    @foreach (var step in PresetSteps)
                    {
                        var stepIndex = index;

                        <button type="button" class="btn btn-outline-primary dropdown-toggle text-break text-wrap" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside" @onclick="() => PresetStepClick(step)">@step.Raw</button>
                        <form class="dropdown-menu p-4 dropdown-menu-end" style="width: 200px">
                            <div class="mb-2">
                                <button type="button" class="btn btn-primary btn-sm" data-bs-dismiss="dropdown" title="Move left" disabled="@(stepIndex == 0)" @onclick="() => MoveLeftOnClick(stepIndex)">&lt;</button>
                                <button type="button" class="btn btn-primary btn-sm" data-bs-dismiss="dropdown" title="Move right" disabled="@(stepIndex == PresetSteps.Count - 1)" @onclick="() => MoveRightOnClick(stepIndex)">&gt;</button>
                                <button type="button" class="btn btn-primary btn-sm" data-bs-dismiss="dropdown" @onclick="() => RemoveOnClick(stepIndex)">Remove</button>
                            </div>
                            <RangeInput TValue="int" @bind-Value="step.Delay" Id="delay" Label="Delay" Unit="ms" Max="10000" @bind-Value:after="() => AfterDelayChanged()" />
                            @if (ActionFieldsEdit != null)
                            {
                                <FieldDefs Fields="ActionFieldsEdit" FieldValueChanged="ActionFieldValueChanged"></FieldDefs>
                            }
                        </form>

                        index++;
                    }
                </div>
            </div>
            <div class="tab-pane fade" id="nav-raw" role="tabpanel" aria-labelledby="nav-raw-tab" tabindex="0">
                <textarea class="form-control" id="rawStepText" rows="3" @onchange="RawTextOnChange" @onblur="RawTextOnBlur" value="@RawText"></textarea>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public List<string>? Steps { get; set; }

    [Parameter]
    public EventCallback<List<string>?> StepsChanged { get; set; }

    [Parameter]
    public List<CustomStepItem>? CustomItems { get; set; }

    [Parameter]
    public List<ActionStepItem>? ActionItems { get; set; }

    [Parameter]
    public bool NvPresetsEnabled { get; set; } = true;

    [Parameter]
    public bool SamsungPresetsEnabled { get; set; } = true;

    [Parameter]
    public bool LgPresetsEnabled { get; set; } = true;

    private PresetStep? CurrentPresetStep;

    public class ActionStepItem
    {
        public string Name { get; private set; }
        public List<InvokableActionDto<TPreset>> Actions { get; private set; }
        public string? SelectedActionName { get; set; }
        public Dictionary<string, List<InvokableActionDto<TPreset>>> GroupedActions;

        public ActionStepItem(string name, List<InvokableActionDto<TPreset>> actions)
        {
            Name = name;
            Actions = actions;

            GroupedActions = actions.GroupBy(a => a.Category).ToDictionary(k => k.Key, v => v.ToList());
        }

        public string GetStepString(List<FieldDefinition>? fields)
        {
            if (string.IsNullOrEmpty(SelectedActionName))
            {
                return "";
            }

            var action = Actions.FirstOrDefault(a => a.Name == SelectedActionName);

            if (action == null)
            {
                return "";
            }

            var field = fields?.FirstOrDefault();

            if (field == null || field.Value == null)
            {
                return $"{action.Name}";
            }

            return $"{action.Name}({field.Value?.ToString()})";
        }
    }

    private List<NvPreset>? NvPresets { get; set; }
    private List<SamsungPreset>? SamsungPresets { get; set; }
    private List<LgPreset>? LgPresets { get; set; }

    private int? SamsungPresetToAddId { get; set; }
    private int? LgPresetToAddId { get; set; }

    private List<PresetStep> PresetSteps = new();

    private string? RawText;

    private List<FieldDefinition>? ActionFields;
    private List<FieldDefinition>? ActionFieldsEdit;

    private string? StartProgramPath;
    private string? StartProgramParameters;

    private List<int> NvPresetsToAdd = [];

    protected override void OnParametersSet()
    {
        if (Steps != null)
        {
            var stepIndex = CurrentPresetStep != null ? PresetSteps.IndexOf(CurrentPresetStep) : -1;

            PresetSteps.Clear();
            PresetSteps.AddRange(Steps.Select(s => PresetStep.Parse(s)));
            RawText = string.Join(", ", PresetSteps);

            if (stepIndex > -1 && stepIndex < PresetSteps.Count)
            {
                CurrentPresetStep = PresetSteps[stepIndex];
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var config = await _rpcClientService.CallAsync<Config>("OptionsService", "GetConfig");

        if (config.HasModule(Module.NvModule))
        {
            NvPresets = (await _rpcClientService.CallAsync<List<NvPreset>>("NvService", "GetPresets"))?.OrderBy(p => p.name).ToList();
        }

        if (config.HasModule(Module.SamsungModule))
        {
            SamsungPresets = (await _rpcClientService.CallAsync<List<SamsungPreset>>("SamsungService", "GetPresets"))?.OrderBy(p => p.name).ToList();
        }

        if (config.HasModule(Module.LgModule))
        {
            LgPresets = (await _rpcClientService.CallAsync<List<LgPreset>>("LgService", "GetPresets"))?.OrderBy(p => p.name).ToList();
        }
    }

    private async Task RemoveOnClick(int index)
    {
        if (PresetSteps.Count > index)
        {
            PresetSteps.RemoveAt(index);
        }

        await EmitSteps();
    }

    private async Task MoveLeftOnClick(int index)
    {
        if (PresetSteps.Count > index && index > 0)
        {
            var step = PresetSteps[index];

            PresetSteps.RemoveAt(index);
            PresetSteps.Insert(index - 1, step);
        }

        await EmitSteps();
    }

    private async Task MoveRightOnClick(int index)
    {
        if (PresetSteps.Count > index + 1)
        {
            var step = PresetSteps[index];

            PresetSteps.RemoveAt(index);
            PresetSteps.Insert(index + 1, step);
        }

        await EmitSteps();
    }

    private async Task AfterDelayChanged()
    {
        await EmitSteps();
    }

    private async Task AddNvPresetOnClick()
    {
        NvPresetsToAdd.ForEach(id => AddPreset(NvPresets, "NvPreset", id));

        await EmitSteps();
    }

    private async Task AddSamsungPresetOnClick()
    {
        AddPreset(SamsungPresets, "SamsungPreset", SamsungPresetToAddId);

        await EmitSteps();
    }

    private async Task AddLgPresetOnClick()
    {
        AddPreset(LgPresets, "LgPreset", LgPresetToAddId);

        await EmitSteps();
    }

    private async Task AddCustomItemsOnClick()
    {
        if (CustomItems != null && Steps != null)
        {
            foreach (var customItem in CustomItems)
            {
                if (string.IsNullOrWhiteSpace(customItem.SelectedItem))
                {
                    continue;
                }

                PresetSteps.Add(PresetStep.Parse(customItem.SelectedItem));
            }
        }

        await EmitSteps();
    }

    private async Task AddActionItemsOnClick()
    {
        if (ActionItems != null && Steps != null)
        {
            foreach (var customItem in ActionItems)
            {
                if (string.IsNullOrWhiteSpace(customItem.SelectedActionName))
                {
                    continue;
                }

                var stepString = customItem.GetStepString(ActionFields);

                PresetSteps.Add(PresetStep.Parse(stepString));
            }
        }

        await EmitSteps();
    }

    private async Task AddStartProgramOnClick()
    {
        AddStartProgram();

        await EmitSteps();
    }

    private async Task AddPresetOnClick()
    {
        NvPresetsToAdd.ForEach(id => AddPreset(NvPresets, "NvPreset", id));
        AddPreset(SamsungPresets, "SamsungPreset", SamsungPresetToAddId);
        AddPreset(LgPresets, "LgPreset", LgPresetToAddId);

        if (CustomItems != null && Steps != null)
        {
            foreach (var customItem in CustomItems)
            {
                if (string.IsNullOrWhiteSpace(customItem.SelectedItem))
                {
                    continue;
                }

                PresetSteps.Add(PresetStep.Parse(customItem.SelectedItem));
                //customItem.SelectedItem = null;
            }
        }
        if (ActionItems != null && Steps != null)
        {
            foreach (var customItem in ActionItems)
            {
                if (string.IsNullOrWhiteSpace(customItem.SelectedActionName))
                {
                    continue;
                }

                var stepString = customItem.GetStepString(ActionFields);

                PresetSteps.Add(PresetStep.Parse(stepString));
                //customItem.SelectedItem = null;
            }
        }

        AddStartProgram();

        await EmitSteps();
    }

    private void AddPreset<T>(List<T>? presets, string type, int? id) where T : PresetBase
    {
        var preset = presets?.FirstOrDefault(p => p.id == id);

        if (preset == null || Steps == null || preset.id == 0)
        {
            return;
        }

        PresetSteps.Add(PresetStep.Parse($"{type}({preset.name})"));
    }

    private void AddStartProgram()
    {
        if (string.IsNullOrWhiteSpace(StartProgramPath))
        {
            return;
        }

        var path = StartProgramPath;
        if (!string.IsNullOrWhiteSpace(StartProgramParameters))
        {
            path += $"; {string.Join("; ", StartProgramParameters.Split(' '))}";
        }

        PresetSteps.Add(PresetStep.Parse($"StartProgram({path})"));
    }

    private async Task EmitSteps()
    {
        if (Steps != null)
        {
            Steps.Clear();
            Steps.AddRange(PresetSteps.Select(ps => ps.UpdatedRaw));
            RawText = string.Join(", ", PresetSteps);

            await StepsChanged.InvokeAsync(Steps);
        }

        StateHasChanged();
    }

    private async Task RawTextOnBlur(FocusEventArgs e)
    {
        var newSteps = new List<string>();

        Utils.ParseWords(newSteps, RawText);

        PresetSteps.Clear();
        PresetSteps.AddRange(newSteps.Select(s => PresetStep.Parse(s)));

        await EmitSteps();
    }

    private void RawTextOnChange(ChangeEventArgs e)
    {
        RawText = e.Value?.ToString();
    }

    private void AdvancedItemChanged(ActionStepItem customItem)
    {
        var action = customItem.Actions.FirstOrDefault(a => a.Name == customItem.SelectedActionName);

        if (action == null)
        {
            ActionFields = null;
            return;
        }

        ActionFields = [CreateField(action)];
    }

    private FieldDefinition CreateField(InvokableActionDto<TPreset> action)
    {
        var fieldType = FieldType.Numeric;
        var strValue = default(string);
        var subLabel = default(string);
        var label = action.Title;

        if (action.EnumType != null)
        {
            fieldType = FieldType.DropDown;
            strValue = Enum.GetNames(action.EnumType).First();
            subLabel = "Note: not all values are available on all models.";
        }
        else if (action.MinValue == action.MaxValue)
        {
            fieldType = FieldType.Label;
            label = $"This will execute {action.Title}";
        }

        var field = new FieldDefinition
            {
                FieldType = fieldType,
                Label = label,
                SubLabel = subLabel,
                ValueType = action.EnumType,
                MinValue = action.MinValue,
                MaxValue = action.MaxValue,
            };

        if (fieldType == FieldType.Numeric)
        {
            field.IntValue = action.CurrentValue;
        }
        else
        {
            field.StringValue = strValue;
        }

        return field;
    }

    private void NvPresetChange(ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value is IEnumerable<string> items)
        {
            NvPresetsToAdd.Clear();
            NvPresetsToAdd.AddRange(items.Select(i => int.Parse(i)));
        }
    }

    private void PresetStepClick(PresetStep step)
    {
        CurrentPresetStep = step;

        var action = ActionItems?.SelectMany(ai => ai.Actions).FirstOrDefault(a => a.Name.Equals(step.ActionName, StringComparison.OrdinalIgnoreCase));

        if (action == null)
        {
            ActionFieldsEdit = null;
            return;
        }

        var field = CreateField(action);
        field.StringValue = step.ActionValue;

        ActionFieldsEdit = [field];
    }

    private async Task ActionFieldValueChanged(FieldDefinition field)
    {
        if (CurrentPresetStep == null)
        {
            return;
        }

        CurrentPresetStep.ActionValue = field.StringValue;

        await EmitSteps();
    }
}