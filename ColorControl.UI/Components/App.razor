@using ColorControl.Shared.Common
@using ColorControl.Shared.Contracts
@using ColorControl.UI.Services
@using ColorControl.UI.Components.Pages.Generic
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject AppState AppState
@inject RpcUiClientService _rpcClientService
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService
@inject ProtectedSessionStorage _sessionStorage

@implements IDisposable
@attribute [StreamRendering]

<!DOCTYPE html>
<html lang="en" data-bs-theme="@AppState.SelectedTheme">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="ColorControl.UI.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />

    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <NotificationsComponent></NotificationsComponent>
</body>

</html>
@code {
    private Config? Config;

    protected override async Task OnInitializedAsync()
    {
        Config ??= await _rpcClientService.CallAsync<Config>("OptionsService", "GetConfig");

        var newTheme = Config?.UseDarkMode == true ? "dark" : "light";

        if (newTheme != AppState.SelectedTheme)
        {
            AppState.SelectedTheme = Config?.UseDarkMode == true ? "dark" : "light";
            _navigationManager.Refresh();
        }

        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}